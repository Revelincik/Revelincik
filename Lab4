using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Data;



namespace LabPOO4
{
    public static class check
    {
        public class stack
        {
            public int top = -1;
            public char[] items = new char[100];

            public void push(char x)
            {
                if (top == 99)
                {
                    Console.WriteLine("Stiva plină");
                }
                else
                {
                    items[++top] = x;
                }
            }

            char pop()
            {
                if (top == -1)
                {
                    Console.WriteLine("Eroare sub debit");
                    return '\0';
                }
                else
                {
                    char element = items[top];
                    top--;
                    return element;
                }
            }

            Boolean isEmpty()
            {
                return (top == -1) ? true : false;
            }
        }

        public static Boolean isMatchingPair(char character1, char character2)
        {
            if (character1 == '(' && character2 == ')')
                return true;
            else
                return false;
        }

        public static Boolean areBracketsBalanced(char[] exp)
        {
      
            Stack<char> st = new Stack<char>();

            for (int i = 0; i < exp.Length; i++)
            {
                if (exp[i] == '(')
                    st.Push(exp[i]);

                if (exp[i] == ')')
                {
                    if (st.Count == 0) 
                    {
                        return false;
                    }
                    else if (!isMatchingPair(st.Pop(), exp[i]))
                    {
                        return false;
                    }
                }
            }

            if (st.Count == 0)
                return true; 
            else
            {
                return false;
            }
        }
        public class EvaluateString
        {
            public static int evaluate(string expression)
            {
                char[] tokens = expression.ToCharArray();
                Stack<int> values = new Stack<int>();
                Stack<char> ops = new Stack<char>();

                for (int i = 0; i < tokens.Length; i++)
                {
                    if (tokens[i] == ' ')
                    {
                        continue;
                    }
                    if (tokens[i] >= '0' && tokens[i] <= '9')
                    {
                        StringBuilder sbuf = new StringBuilder();
                        while (i < tokens.Length && tokens[i] >= '0' && tokens[i] <= '9')
                        {
                            sbuf.Append(tokens[i++]);
                        }
                        values.Push(int.Parse(sbuf.ToString()));
                        i--;
                    }
                    else if (tokens[i] == '(')
                    {
                        ops.Push(tokens[i]);
                    }
                    else if (tokens[i] == ')')
                    {
                        while (ops.Peek() != '(')
                        {
                            values.Push(applyOp(ops.Pop(), values.Pop(), values.Pop())); 
                        }
                        ops.Pop();
                    }
                    else if (tokens[i] == '+' ||
                             tokens[i] == '-' ||
                             tokens[i] == '*' ||
                             tokens[i] == '/')
                    {

                        while (ops.Count > 0 &&
                                 hasPrecedence(tokens[i], ops.Peek()))  
                        {
                            values.Push(applyOp(ops.Pop(), values.Pop(), values.Pop()));
                        }
.
                        ops.Push(tokens[i]);
                    }
                }

                while (ops.Count > 0)
                {
                    values.Push(applyOp(ops.Pop(), values.Pop(), values.Pop()));
                }

                return values.Pop();
            }
            public static bool hasPrecedence(char op1, char op2)
            {
                if (op2 == '(' || op2 == ')')
                {
                    return false;
                }
                if ((op1 == '*' || op1 == '/') &&
                       (op2 == '+' || op2 == '-'))
                {
                    return false;
                }
                else
                {
                    return true;
                }
            }

            public static int applyOp(char op, int b, int a)
            {
                switch (op)
                {
                    case '+':
                        return a + b;
                    case '-':
                        return a - b;
                    case '*':
                        return a * b;
                    case '/':
                        if (b == 0)
                        {
                            throw new
                            NotSupportedException("Nu se poate împărți la zero");
                        }
                        return a / b;
                }
                return 0;
            }

            public static void Main(string[] args)
            {

                DataTable dt = new DataTable();
                string line1 = File.ReadAllText(@"C:\Users\ianva\Downloads\one_expression (1).txt");
                char[] line1_char = line1.ToCharArray();



                if (areBracketsBalanced(line1_char))
                {
                    Console.WriteLine("Următoarea expresie este echilibrată");
                    var c = dt.Compute(line1, " ");
                    Console.WriteLine("Rezultatul expresiei este: " + c);
                }
                else
                    Console.WriteLine("Următoarea expresie nu este echilibrată");

                Console.WriteLine("--------------------------------------------");


                var list = new List<string[]>();
                using (StreamReader reader = new StreamReader(@"C:\Users\ianva\Downloads\three_expressions.txt"))
                {
                    string line;
                    while ((line = reader.ReadLine()) != null)
                    {
                        list.Add(line.Split(';'));
                    }
                }

                string firstExpression = list[0][0];
                string secondExpression = list[1][0];
                string thirdExpression = list[2][0];

                char[] firstexpress_char = firstExpression.ToCharArray();
                char[] secondexpress_char = secondExpression.ToCharArray();
                char[] thirdexpress_char = thirdExpression.ToCharArray();


                if (areBracketsBalanced(firstexpress_char))
                {
                    Console.WriteLine("Prima expresie este echilibrată");
                    Console.WriteLine("Rezultatul primei expresii este: " + EvaluateString.evaluate(firstExpression));

                }
                else
                    Console.WriteLine("Prima expresie nu este echilibrată, prin urmare nu o putem evalua!");

                if (areBracketsBalanced(secondexpress_char))
                {
                    Console.WriteLine("A doua expresie este echilibrată");
                    Console.WriteLine(EvaluateString.evaluate(secondExpression));

                }
                else
                    Console.WriteLine("Prima expresie nu este echilibrată, prin urmare nu o putem evalua!");

                if (areBracketsBalanced(thirdexpress_char))
                {
                    Console.WriteLine("A treia expresie este echilibrată");
                    Console.WriteLine(EvaluateString.evaluate(thirdExpression));

                }
                else
                    Console.WriteLine("Prima expresie nu este echilibrată, prin urmare nu o putem evalua!");
            }
        }
    }
}
